# -*- coding: utf-8 -*-
"""BardYayo.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d-1c1oAMhwDDTrpi-AGaD4C9wsXcBu7h

# README (Para Marta)
Es importante ejecutarlo en un google exclusivo de la cuenta martavn16@gmail.com, la de la ucm lo tiene de alguna manera capado.

En el video ("como clonar la api de bard...") y en el git hub que sale en ese video, tmb enseñan como hacer audios y fotos con eso. Lo de las fotos podría ser interesante. También a hacer la interfaz del chatbot como algo de telegram.
"""

!pip install bardapi

from bardapi import Bard
import os

os.environ['_BARD_API_KEY'] = 'g.a000gggMonNfh8wXBYZHQFkVjWTTLjd2EGvQ1gjCsUAb9vgt-xHIp4Vt9h4EaxFKAvJAOPrlygACgYKAdgSAQASFQHGX2MiZKOnpaiapO9oLqBFmy2FOxoVAUF8yKqCja4h-3wF88WTbkshgfw-0076'

print(Bard().get_answer("Quiero ponerte un texto con información de una chica y que tu me digas el nombre de la chica si es que cuenta esa información. ¿Es esto posible? ")['content'])

print(Bard().get_answer("Voy a introducirte un texto en el que se proporciona información sobre una persona. Quiero que tu respuesta sea nombre: su nombre, en caso de que en el texto te lo diga")['content'])

print(Bard().get_answer("El texto es el siguiente: Hola me llamo Marta y soy de Calatayud Zaragoza. Quiero que obtengas información de ese texto y me devuelvas un texto de la siguiente forma atributo_ valor, atributo: valor")['content'])

prompt_ini = "A partir del texto con información sobre una persona que te voy a introducir a continuación, quiero que me devuelvas un texto exactamente con el formato
+ "Info[nombre_atributo:valor_atributo;nombre_atributo2:valor2] Quiero que el texto este limpio, ningún tipo de formato especial como negrita, ni cursiva. El texto es : "
answer_text = "hola mi nombre es Marta, tengo 22 años, mi cumple es el 9 de julio y nací en 2001. Me gusta comer y estar con mis amigos. Soy de Calatayud, Zaragoza."
info = Bard().get_answer(prompt_ini+answer_text)['content']

print(info)

extraer_info(info)

"""# Interfaz de chatbot en telegram"""

!pip install pyTelegramBotApi

"""# Imagenes con el chatbot"""

res = Bard().get_answer("Find me an image of the main entrance of Stanford University.")
res['links'] # Get image links (list)
res['images'] # Get images (list)

import bardapi

bard = bardapi.Bard()

!pip install bard --upgrade

!pip show bard

main()

"""# CÓDIGO FINAL"""

import re

def extraer_info(texto):
    # Patrón de expresión regular para encontrar el fragmento de información
    patron_info = re.compile(r'Info\[(.*?)\]')

    # Buscar el fragmento de información en el texto
    coincidencias = patron_info.search(texto)

    # Inicializar un diccionario para almacenar la información extraída
    info_diccionario = {}

    # Si se encontraron coincidencias
    if coincidencias:
        # Obtener el contenido dentro de los corchetes []
        contenido_info = coincidencias.group(1)

        # Dividir el contenido en pares nombre:valor
        pares_nombre_valor = contenido_info.split(';')

        # Recorrer los pares y agregar al diccionario
        for par in pares_nombre_valor:
            nombre, valor = par.split(':')
            info_diccionario[nombre.strip()] = valor.strip()

    return info_diccionario

class Paciente:
  nombre = ""
  edad =  0
  aficiones = ""

def main():
  paciente = Paciente()
  parsear

class Paciente:
    def __init__(self):
        self.nombre = ""
        self.edad = 0
        self.profesion = ""
        self.familia = ""
        self.ciudad = ""
        self.infancia = ""
        # Puedes agregar más atributos según sea necesario

    def obtener_informacion(self):
        """Devuelve un resumen de la historia de vida del paciente."""
        informacion = f"Nombre: {self.nombre}\nEdad: {self.edad}\nProfesión: {self.profesion}\nFamilia: {self.familia}\nCiudad: {self.ciudad}"
        # Puedes agregar más información aquí
        return informacion

    def actualizar(self, cambios):
        """Actualiza los atributos del paciente con los valores proporcionados en la lista de cambios."""
        for cambio in cambios:
            atributo, valor = cambio.split(":")
            atributo = atributo.strip()
            valor = valor.strip()
            # Verificamos si el atributo existe en la clase antes de intentar actualizarlo
            if hasattr(self, atributo):
                setattr(self, atributo, valor)
            else:
                print(f"Atributo '{atributo}' no encontrado. No se realizó la actualización.")

def parsear_info(answer_text, paciente):
    prompt_ini = "A partir del texto con información sobre una persona que te voy a introducir a continuación, quiero que me devuelvas un texto exactamente con el formato Info[nombre_atributo:valor_atributo;nombre_atributo2:valor2] Quiero que el texto este limpio, ningún tipo de formato especial como negrita, ni cursiva. El texto es : "
    info = Bard().get_answer(prompt_ini+answer_text)['content']
    tupla = extraer_info(info)
    actualizar(tupla,paciente)

import ipywidgets as widgets
from IPython.display import display

def chatbot():
    print("Bienvenido")

    # Pide nombre y edad
    nombre_widget = widgets.Text(description="Nombre:")
    edad_widget = widgets.IntSlider(description="Edad:", min=0, max=100)
    boton_siguiente = widgets.Button(description="Siguiente")
    boton_siguiente2 = widgets.Button(description="Siguiente")
    boton_siguiente3 = widgets.Button(description = "Siguiente")
    ciudad_widget = widgets.Text(description="Ciudad:")
    infancia_widget = widgets.Text(description="Infancia:")
    familia_widget = widgets.Text(description="Familia:")
    boton_end = widgets.Button(description="Fin")

    # Variables para almacenar la información
    nombre = ""
    edad = 0
    ciudad = ""
    infancia = ""
    familia = ""

    # Función que se ejecutará cuando se haga clic en el botón
    def siguiente_paso(b):
        nonlocal nombre, edad
        nombre = nombre_widget.value
        edad = edad_widget.value

        # Muestra los widgets para la ciudad
        display(ciudad_widget, boton_siguiente2)

    def info_inf(b):
      nonlocal ciudad
      ciudad = ciudad_widget.value

      display(infancia_widget,boton_siguiente3)


    def info_fam(b):
      nonlocal infancia
      infancia = infancia_widget.value

      display(familia_widget, boton_end)


    def finalizar(b):
      nonlocal familia
      familia = familia_widget.value

      print(f"¡Gracias, {nombre} de {ciudad}! ¡Bye!")

    # Asocia la función con el evento de clic en el botón
    boton_siguiente.on_click(siguiente_paso)
    boton_siguiente2.on_click(info_inf)
    boton_siguiente3.on_click(info_fam)
    boton_end.on_click(finalizar)

    # Muestra los widgets para nombre y edad
    display(nombre_widget, edad_widget, boton_siguiente)



chatbot()